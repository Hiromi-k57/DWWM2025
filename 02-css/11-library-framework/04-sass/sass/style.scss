@use "list";
h1{
    color: red;
}
section.sass
{
    background-color: aquamarine;
    h2
    {
        background-color: brown;
        padding: 5px;
        // Ne rien préciser avant le selecteur, compte comme "enfant de" .セレクターの前に何も指定しないでください。セレクターは「子」としてカウントされます。
        // & span
        span
        {
            font-style: italic;
        }
        // Le symbole & représente le selecteur parent, ici "h2". &記号は親セレクター（ここでは「h2」）を表します。
        &:hover
        {
            transform: scale(1.2);
        }
    }
}
// variable sass $変数名: 値;
$colorMain: violet;
.scss
{
    background-color: $colorMain;
}
// extends 再利用したい1度定義したクラスを他のクラスにも継承
/* 
    Les extends permettent d'écrire un morceau de code et de les réutiliser ailleurs.
    ils sont déclaré avec un "%" suivi d'un nom.
        Extends を使用すると、コードを記述して他の場所で再利用できます。Extends は、「%」に続けて名前を宣言します。
*/
%flexCenter
{
    display: flex;
    justify-content: center;
    align-items: center;
}
header
{
    /* 
        On utilisera @extend pour appeler toute les propriétés d'un extend ou d'une classe.
        @extend は、extend またはクラスのすべてのプロパティを呼び出すために使用されます。
    */
    @extend %flexCenter;
    @extend .scss;
}
main ul 
{
    @extend %flexCenter;
}

// Mixin
/* 
    Les mixins vont ressembler aux extends, si ce n'est qu'elles sont plus paramétrable.
    Elles se déclarent avec "@mixin unNom()"

    On peut ajouter des propriétés sous forme de variable à nos mixins, celles ci devront alors être transmise lors de l'appelle.
    En ajoutant ":uneValeur" après une propriété, celle ci prendra cette valeur par défaut, si aucune ne lui ai transmise.

        Mixin は extends に似ていますが、より柔軟に設定可能です。
        mixin は「@mixin someName()」で宣言されます。

        mixin には変数としてプロパティを追加できます。これらのプロパティは、mixin が呼び出される際に渡される必要があります。
        プロパティの後に「:someValue」を追加すると、何も渡されない場合にデフォルトでその値が設定されます。
*/
@mixin absol($top, $left, $trx: -50%, $try: -50%)
{
    position: absolute;
    top: $top;
    left: $left;
    transform: translate($trx, $try);
}
.copy
{
    font-size: 3rem;
    background-color: paleturquoise;
    @include absol(50%, 50%);
}
.menu
{
    font-size: 3rem;
    background-color: mediumpurple;
    @include absol(20px, 80vw, $try: 100%);
}
// fonctions
/* 
    Une fonction permet de prendre une valeur en paramètre, et de la modifier avant de la renvoyer,
    ici par exemple on prend une couleur,
    on cherche la couleur complémentaire,
    on l'éclairci un peu, 
    puis on la renvoi avec "@return"

    関数を使うと、値をパラメータとして受け取り、それを返す前に変更することができます。
    例えば、ここでは色を受け取り、
    補色を探し、
    少し明るくし、
    「@return」で返します。
*/
@function compLight($color)
{
    // $color: yellow;
    $color: complement($color);
    $color: lighten($color, 5%);
    @return $color;
}
.copy
{
    color: compLight(mediumpurple);
}
// conditions
@mixin radius($w, $h)
{
    width: $w;
    height: $h;
    @if $w == $h
    {
        border-radius: 50%;
    }
    @else
    {
        border-radius: 5px;
    }
}
.copy
{
    @include radius(5rem, 5rem);
}
.menu
{
    @include radius(10rem, 5rem);
}
.copy, .menu
{
    @extend %flexCenter;
}